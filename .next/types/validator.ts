// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\about\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\about\\page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ..\..\src\app\contact\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\contact\\page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ..\..\src\app\knowledge-hub\blogs\[slug]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\knowledge-hub\\blogs\\[slug]\\page.js")
  handler satisfies AppPageConfig<"/knowledge-hub/blogs/[slug]">
}

// Validate ..\..\src\app\knowledge-hub\blogs\archive\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\knowledge-hub\\blogs\\archive\\page.js")
  handler satisfies AppPageConfig<"/knowledge-hub/blogs/archive">
}

// Validate ..\..\src\app\knowledge-hub\blogs\category\[category]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\knowledge-hub\\blogs\\category\\[category]\\page.js")
  handler satisfies AppPageConfig<"/knowledge-hub/blogs/category/[category]">
}

// Validate ..\..\src\app\knowledge-hub\blogs\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\knowledge-hub\\blogs\\page.js")
  handler satisfies AppPageConfig<"/knowledge-hub/blogs">
}

// Validate ..\..\src\app\knowledge-hub\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\knowledge-hub\\page.js")
  handler satisfies AppPageConfig<"/knowledge-hub">
}

// Validate ..\..\src\app\mentorship\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\mentorship\\page.js")
  handler satisfies AppPageConfig<"/mentorship">
}

// Validate ..\..\src\app\newsletter\blogs\[slug]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\newsletter\\blogs\\[slug]\\page.js")
  handler satisfies AppPageConfig<"/newsletter/blogs/[slug]">
}

// Validate ..\..\src\app\newsletter\blogs\archive\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\newsletter\\blogs\\archive\\page.js")
  handler satisfies AppPageConfig<"/newsletter/blogs/archive">
}

// Validate ..\..\src\app\newsletter\blogs\category\[category]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\newsletter\\blogs\\category\\[category]\\page.js")
  handler satisfies AppPageConfig<"/newsletter/blogs/category/[category]">
}

// Validate ..\..\src\app\newsletter\blogs\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\newsletter\\blogs\\page.js")
  handler satisfies AppPageConfig<"/newsletter/blogs">
}

// Validate ..\..\src\app\newsletter\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\newsletter\\page.js")
  handler satisfies AppPageConfig<"/newsletter">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\privacy-policy\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\privacy-policy\\page.js")
  handler satisfies AppPageConfig<"/privacy-policy">
}

// Validate ..\..\src\app\terms-and-conditions\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\terms-and-conditions\\page.js")
  handler satisfies AppPageConfig<"/terms-and-conditions">
}

// Validate ..\..\src\app\webinar\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\webinar\\page.js")
  handler satisfies AppPageConfig<"/webinar">
}

// Validate ..\..\src\app\webinar\room\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\webinar\\room\\page.js")
  handler satisfies AppPageConfig<"/webinar/room">
}

// Validate ..\..\src\app\api\zoom\webinar-list\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\zoom\\webinar-list\\route.js")
  handler satisfies RouteHandlerConfig<"/api/zoom/webinar-list">
}

// Validate ..\..\src\app\api\zoom\webinar-signature\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\zoom\\webinar-signature\\route.js")
  handler satisfies RouteHandlerConfig<"/api/zoom/webinar-signature">
}





// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
